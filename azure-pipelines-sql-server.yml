trigger: none

parameters:
- name: deployServer
  displayName: Deploy SQL Server
  type: boolean
  default: false

pool:
  name: DAS - Continuous Integration Agents

variables:
- name: SolutionBaseName
  value: CI.Test
- name: BuildConfiguration
  value: release
- name: ServiceConnection
  value: SFA-DAS-DevTest-ARM
- group: DevTest Management Resources
- group: das-ci-tests

resources:
  repositories:
  - repository: self
  - repository: das-platform-building-blocks
    type: github
    name: SkillsFundingAgency/das-platform-building-blocks
    ref: refs/tags/3.0.10
    endpoint: SkillsFundingAgency
  - repository: das-platform-automation
    type: github
    name: SkillsFundingAgency/das-platform-automation
    ref: refs/tags/5.1.17
    endpoint: SkillsFundingAgency

stages:
- stage: Build
  jobs:
  - template: pipeline-templates/job/code-build.yml
    parameters:
      SolutionBaseName: ${{ variables.SolutionBaseName }}
      BuildConfiguration: ${{ variables.BuildConfiguration }}

- stage: Deploy
  displayName: Deploy SQL DB and Run Tests
  jobs:
  - deployment: DeployWebApp
    condition: ${{ parameters.deployServer }}
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - template: azure-pipelines-templates/deploy/step/wait-azure-devops-deployment.yml@das-platform-building-blocks
            parameters:
              ServiceConnection: ${{ variables.ServiceConnection }}
              EnvironmentId: $(Environment.Id)
              PipelineName: $(Build.DefinitionName)
              RunId: $(Build.BuildId)
          - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
            parameters:
              ServiceConnection: ${{ variables.ServiceConnection }}
              SubscriptionId: $(SubscriptionId)
              Location: $(location)
              Environment: DEV
              TemplatePath: $(Pipeline.Workspace)/${{ variables.SolutionBaseName }}/azure/template-sql-server.json
              ParametersPath: $(Pipeline.Workspace)/${{ variables.SolutionBaseName }}/azure/template-sql-server.parameters.json
              IsMultiRepoCheckout: true
  - job: Test
    steps:
    # Azure login + create SQL resources
    - task: AzureCLI@2
      displayName: Provision Temporary SQL DB
      inputs:
        azureSubscription: ${{ variables.ServiceConnection }}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          exit -eou pipefail

          az sql db create -g $(rgName) -s $(sqlServer) -n $(sqlDB) \
            --edition Basic

          echo "ADO_CONNSTR=Server=tcp:$(sqlServer).database.windows.net,1433;Initial Catalog=$(sqlDB);Persist Security Info=False;User ID=$(sqlUser);Password=$(sqlPass);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" >> $GITHUB_ENV 2>/dev/null || true
          echo "##vso[task.setvariable variable=ADO_CONNSTR;issecret=true]Server=tcp:$(sqlServer).database.windows.net,1433;Initial Catalog=$(sqlDB);Persist Security Info=False;User ID=$(sqlUser);Password=$(sqlPass);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'

    # (Optional) run schema/migrations for tests
    - script: |
        dotnet tool install --global dotnet-ef
        export PATH="$PATH:$HOME/.dotnet/tools"
        # adjust project paths as needed:
        # dotnet ef database update --project src/App/App.csproj --startup-project tests/Tests/Tests.csproj --connection "$(ADO_CONNSTR)"
      displayName: 'Apply DB migrations (optional)'
      condition: succeeded()

    # Unit tests
    - script: |
        dotnet test --configuration Release --filter "TestCategory!=Integration"
      displayName: 'Run Unit Tests'

    # Integration tests (point SQL DB)
    - script: |
        export ConnectionStrings__Integration="$(ADO_CONNSTR)"
        dotnet test --configuration Release --filter "TestCategory=Integration"
      displayName: 'Run Integration Tests'

    # Cleanup (best-effort)
    - task: AzureCLI@2
      displayName: 'Tear down SQL DB'
      condition: always()
      inputs:
        azureSubscription: ${{ variables.ServiceConnection }}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az sql db delete --name $(sqlDB) --resource-group "das-ci-tests-rg" --server "das-ci-tests-sql"
